

As you browse the internet and make requests for specific actions to be taken, you may become curious about how the internet actually works. While there is nothing inherently mysterious about the internet, understanding its inner workings can be complex. In this blog post, we will delve into the various concepts that are necessary for a full understanding of the topic, including DNS requests, TCP/IP, firewalls, HTTPS/SSL, load-balancers, web servers, application servers, and databases.

Before focusing on these concepts, it is important to first understand what a URL is. A URL, or Uniform Resource Location, is used to gain access to a website. The URL is comprised of several parts, including the protocol, hostname, port, and path-and-filename. For the purposes of this blog post, we will focus on the protocol and hostname. The protocol, such as https, specifies the method for accessing the website, while the hostname, such as google.com, specifies the domain name and is used to identify the location of the website on the internet.

DNS Request:

When you try to access a computer on the internet, a DNS request is initiated. For example, when you type google.com in your browser's address bar, the first stop for the DNS request is the local DNS cache. If the IP address for the requested site is not stored in the local DNS cache, DNS will check with a recursive DNS server provided by your Internet Service Provider (ISP). If the recursive DNS server does not have the IP address, it will ask another DNS server. The next stop is the TLD (top-level domain) name servers, which provide the location of the authoritative name server for the requested site. The authoritative name server responds with the IP address for google.com, and the recursive DNS server stores it in the local DNS cache, returning the address to your computer. Your local DNS service then connects to google.com to download the content. The IP address is stored in the local cache with a time-to-live (TTL) value, which specifies how long the local DNS record is valid before the process is repeated when you request google.com again.

TCP/IP:

Once the browser has the IP address of the server, it needs to establish communication with the server. TCP/IP functionality is divided into four layers, each with its own set of agreed-upon protocols: the link layer, the internet (or networking) layer, the transport layer, and the application layer. These layers are responsible for managing communication between the browser and the server.

Firewall:

Web servers use a firewall to protect against breaches and attacks. For example, if a source starts flooding the web server hosting google.com with a large number of concurrent requests, the firewall will detect the problem and block requests from that IP address to prevent them from reaching the server.

HTTPS/SSL:

HTTPS (Hyper Text Transfer Protocol Secure) appears in the URL when a website is secured by an SSL (Secure Sockets Layer) certificate. SSL is the standard technology for keeping an internet connection secure and safeguarding any sensitive data that is being sent between two systems, preventing criminals from reading and modifying any information transferred. It does this by encrypting data transferred between users and sites.

Load-balancer:

A load balancer is a device that acts as a reverse proxy and distributes network or application traffic across a number of servers, increasing concurrent users and reliability of applications. If a server goes down, it starts redirecting requests to different servers that are online.

Web Server:

A web server is computer software and underlying hardware that accepts requests via HTTP or HTTPS. When you request google.com, the HTTP server checks whether the requested URL matches any existing files, and if found, sends the file content back to the browser, or sends a "404 Not Found" error.

Application Server:

An application server exposes business logic to clients, which generates dynamic content. It is a software framework that transforms data to provide the specialized functionality offered by a business, service, or application. Application servers enhance the interactive parts of a website that can appear differently depending on the context of the request.

Database:

A database is an organized collection of data that is stored and accessed electronically. Web servers fetch data from a database, and when you type google.com in your browser, a server will query a database for your search and fetch the results to give you feedback.

